;(function( $ ) {

  $.fn.blacklight_leaflet_map = function(geojson_docs, arg_opts) {
    var map, sidebar, markers, geoJsonLayer, currentLayer;

    var mapped_items = '<span class="mapped-count"><span class="badge">' + geojson_docs.features.length + '</span> location' + (geojson_docs.features.length !== 1 ? 's' : '') + ' mapped</span>';

    var mapped_caveat = '<span class="mapped-caveat">Only items with location data are shown below</span>';

    var sortAndPerPage = $('#sortAndPerPage');

    // Update page links with number of mapped items, disable sort, per_page, pagination
    if (sortAndPerPage.length) {
        var page_links = sortAndPerPage.find('.page_links');
        var result_count = page_links.find('.page_entries').find('strong').last().html();
        page_links.html('<span class="page_entries"><strong>' + result_count + '</strong> items found</span>' + mapped_items + mapped_caveat);
        sortAndPerPage.find('.dropdown-toggle').hide();

        // clusters should show item result count in #index and #map views
        var clusterIconFunction = function (cluster) {
            var markers = cluster.getAllChildMarkers();
            var childCount = 0;
            for (var i = 0; i < markers.length; i++) {
                childCount += markers[i].feature.properties.hits;
            }
            var c = ' marker-cluster-';
            if (childCount < 10) {
                c += 'small';
            } else if (childCount < 100) {
                c += 'medium';
            } else {
                c += 'large';
            }
            return new L.divIcon({ html: '<div><span>' + childCount + '</span></div>', className: 'marker-cluster' + c, iconSize: new L.Point(40, 40) });
        }

    } else {
        $(this.selector).before(mapped_items);
        var clusterIconFunction = this._defaultIconCreateFunction;
    }

    // Configure default options and those passed via the constructor options
    var options = $.extend({
      tileurl : 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
      mapattribution : 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>',
      viewpoint: [0,0],
      initialzoom: 2,
      singlemarkermode: true,
      catalogpath: 'catalog',
      searchctrlcue: 'Search for all items within the current map window'
    }, arg_opts );

    // Extend options from data-attributes
    $.extend(options, this.data());

    // Display the map
    this.each(function() {
      options.id = this.id;

      // Setup Leaflet map
      map = L.map(this.id);

      // set the viewpoint and zoom
      if (options.viewpoint[0].constructor === Array) {
          map.fitBounds(options.viewpoint, {padding:[50,50]});
      } else {
          map.setView(options.viewpoint, options.initialzoom);
      }

      L.tileLayer(options.tileurl, {
        attribution: options.mapattribution,
        maxZoom: options.maxzoom
      }).addTo(map);

      // Create a marker cluster object and set options
      markers = new L.MarkerClusterGroup({
          singleMarkerMode: options.singlemarkermode,
          iconCreateFunction: clusterIconFunction
      });

      geoJsonLayer = L.geoJson(geojson_docs, {
        onEachFeature: function(feature, layer){
            if (feature.properties.popup) {
                layer.bindPopup(feature.properties.popup);
            } else {
                layer.bindPopup("Sorry, there is no data for this location.");
            }
        }
      });

      // Add GeoJSON layer to marker cluster object
      markers.addLayer(geoJsonLayer);

      // Add markers to map
      map.addLayer(markers);

      // create search control
      var searchControl = L.Control.extend({
          options: { position: 'topleft' },

          onAdd: function (map) {
              // create the control container with a particular class name
              var container = L.DomUtil.create('div', 'leaflet-bar leaflet-control');
              this.link = L.DomUtil.create('a', 'leaflet-bar-part search-control',
                      container);
              //this.link.href = '#';
              this.link.title = options.searchctrlcue;
              this.icon = L.DomUtil.create('i', 'glyphicon glyphicon-search', this.link);

              L.DomEvent.addListener(this.link, 'click', _search);

              return container;
          }

      });

      // add search control to map
      map.addControl(new searchControl());


    });

      function _search(e) {
          var params = filterParams(['view', 'spatial_search_type', 'coordinates', 'f%5Bsubject_geographic_ssim%5D%5B%5D']), // TODO use config for geo facet param
              bounds = map.getBounds().toBBoxString().split(','),
              coordinate_params = '[' + bounds[1] + ',' + bounds[0] + ' TO ' + bounds[3] + ',' + bounds[2] + ']';
          params.push('coordinates=' + encodeURIComponent(coordinate_params), 'spatial_search_type=bbox');
          console.log(params);
          $(location).attr('href', options.catalogpath + '?' + params.join('&'));
          //this._searcher(params.join('&'));
          //alert('HEY!');
      }

      function filterParams(filterList) {
          var querystring = window.location.search.substr(1),
              params = [];
          if (querystring !== "") {
              params = $.map(querystring.split('&'), function(value) {
                  if ($.inArray(value.split('=')[0], filterList) > -1) {
                      return null;
                  } else {
                      return value;
                  }
              });
          }
          return params;
      }


  };

}( jQuery ));
